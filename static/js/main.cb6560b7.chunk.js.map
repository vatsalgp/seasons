{"version":3,"sources":["SeasonDisplay.js","Spinner.js","ErrorDisplay.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","ErrorDisplay","style","color","App","state","errMsg","window","navigator","geolocation","getCurrentPosition","pos","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,WACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,YACNC,SAAU,eAwBHE,EAZO,SAAAC,GAClB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIL,EAEAP,EAAaS,GAAhCP,EAFmB,EAEnBA,KAAMC,EAFa,EAEbA,SACd,OACI,yBAAKS,UAAWH,EAAS,mBACrB,uBAAGG,UAAWT,EAAW,4BACzB,4BAAKD,GACL,uBAAGU,UAAWT,EAAW,+BC3B/BU,EAAU,SAAAP,GACZ,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,eAGED,QCJAG,EARM,SAAAV,GACjB,OACI,yBAAKM,UAAU,oBACX,wBAAIK,MAAO,CAAEC,MAAO,UAAY,SAAWZ,EAAMQ,WCCvDK,E,2MAEFC,MAAQ,CAAEb,IAAK,KAAMc,OAAQ,I,mFAER,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEpB,IAAKmB,EAAIE,OAAOC,cACvC,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,OAAQS,EAAIhB,e,sCAKvC,IAAMP,EAAMwB,KAAKX,MAAMb,IAAKuB,EAAMC,KAAKX,MAAMC,OAE7C,OAAId,IAAQuB,EACD,kBAAC,EAAD,CAAevB,IAAKA,KACrBA,GAAOuB,EACN,kBAAC,EAAD,CAAchB,QAASgB,IAEvB,kBAAC,EAAD,CAAShB,QAAQ,qC,+BAI5B,OAAO,yBAAKF,UAAU,WAAWmB,KAAKC,qB,GAvB5BC,IAAMC,WA2BxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.cb6560b7.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\nimport React from \"react\";\n\nconst seasonConfig = {\n    summer: {\n        text: \"It's Hot\",\n        iconName: \"sun\"\n    },\n    winter: {\n        text: \"It's Cold\",\n        iconName: \"snowflake\"\n    }\n}\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? \"summer\" : \"winter\";\n    } else {\n        return lat > 0 ? \"winter\" : \"summer\";\n    }\n}\n\nconst SeasonDisplay = props => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n    return (\n        <div className={season + \" season-display\"}>\n            <i className={iconName + \" icon massive icon-left\"} />\n            <h1>{text}</h1>\n            <i className={iconName + \" icon massive icon-right\"} />\n        </div>\n    );\n}\n\nexport default SeasonDisplay;","import React from \"react\";\n\nconst Spinner = props => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">{props.message}</div>\n        </div>\n    );\n}\n\nSpinner.defaultProps = {\n    message: \"Loading ...\"\n}\n\nexport default Spinner;","import React from \"react\";\n\nconst ErrorDisplay = props => {\n    return (\n        <div className=\"ui active dimmer\">\n            <h1 style={{ color: \"white\" }}>{\"Error \" + props.message}</h1>\n        </div>\n    );\n}\n\nexport default ErrorDisplay;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\nimport ErrorDisplay from \"./ErrorDisplay\";\n\nclass App extends React.Component {\n\n    state = { lat: null, errMsg: \"\" };\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            pos => this.setState({ lat: pos.coords.latitude }),\n            err => this.setState({ errMsg: err.message })\n        );\n    }\n\n    renderContent() {\n        const lat = this.state.lat, err = this.state.errMsg;\n\n        if (lat && !err)\n            return <SeasonDisplay lat={lat} />\n        else if (!lat && err)\n            return <ErrorDisplay message={err} />\n        else\n            return <Spinner message=\"Please accept location request\" />\n    }\n\n    render() {\n        return <div className=\"content\">{this.renderContent()}</div>\n    }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));"],"sourceRoot":""}